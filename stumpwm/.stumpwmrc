;; Load swank.
;; *prefix-key* ; swank will kick this off
(load "/usr/share/common-lisp/source/slime/swank-loader.lisp")
(swank-loader:init)
(defcommand swank (&optional (port 4005)) (:number)
  (swank:create-server :port port
                       :style swank:*communication-style*
                       :dont-close t)
  (echo-string (current-screen)
               "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm)."))
(swank)



(defvar *autostart-filename* "~/.stumpwm_autostart")

(defun reload-autostart-file ()
  (when (probe-file *autostart-filename*)
    (sb-ext:run-program "/bin/sh" (list "-c" *autostart-filename*))))

(reload-autostart-file)



(defun xbacklight (&key set inc dec time steps)
  (sb-ext:run-program "xbacklight" (concatenate 'list
                                                (when set   (list "-set"   (write-to-string set)))
                                                (when inc   (list "-inc"   (write-to-string inc)))
                                                (when dec   (list "-dec"   (write-to-string dec)))
                                                (when time  (list "-time"  (write-to-string time)))
                                                (when steps (list "-steps" (write-to-string steps))))
                      :search t))

(stumpwm:defcommand backlight-up (percent &optional time steps) (:number :number :number)
  (xbacklight :inc percent :time time :steps steps))

(stumpwm:defcommand backlight-down (percent &optional time steps) (:number :number :number)
  (xbacklight :dec percent :time time :steps steps))

(stumpwm:defcommand backlight-set (percent &optional time steps) (:number :number :number)
  (xbacklight :set percent :time time :steps steps))



(defun BAT0-energy-now ()
  (with-open-file (energy_now "/sys/class/power_supply/BAT0/energy_now" :direction :input)
    (read energy_now)))

(defun BAT0-energy-full ()
  (with-open-file (energy_full "/sys/class/power_supply/BAT0/energy_full" :direction :input)
    (read energy_full)))

(defun BAT0-power-now ()
  (with-open-file (energy_full "/sys/class/power_supply/BAT0/power_now" :direction :input)
    (read energy_full)))

(defun BAT0-percent ()
  (values (round (* 100
                    (/ (float (BAT0-energy-now))
                       (float (BAT0-energy-full)))))))

(defun BAT0-hours-left ()
  (float (/ (BAT0-energy-now) (BAT0-power-now))))

(stumpwm:defcommand battery-percent () ()
  (echo-string (current-screen)
               (concatenate 'string (write-to-string (BAT0-percent))
                            "%")))



(defun scrot (&key file border display-countdown delay exec quality multi-display select currently-focused thumbnail-size silent)
  (sb-ext:run-program "scrot" (concatenate 'list
                                           (when border            (list "-b"))
                                           (when display-countdown (list "-c"))
                                           (when delay             (list "-d" (write-to-string delay)))
                                           (when exec              (list "-e" exec))
                                           (when quality           (list "-q" (write-to-string quality)))
                                           (when multi-display     (list "-m"))
                                           (when select            (list "-s"))
                                           (when currently-focused (list "-u"))
                                           (when thumbnail-size    (list "-t" (write-to-string thumbnail-size)))
                                           (when silent            (list "-z")))
                      :search t))

(stumpwm:defcommand scrot-all (&optional delay file)
    (:number :string)
  (scrot :delay delay :file file :multi-display t))

(stumpwm:defcommand scrot-display (&optional delay file)
    (:number :string)
  (scrot :delay delay :file file))

(stumpwm:defcommand scrot-window (&optional delay file)
    (:number :string)
  (scrot :delay delay :file file :currently-focused t))

; FIXME
(stumpwm:defcommand scrot-selection (&optional delay file)
    (:number :string)
  (scrot :delay delay :file file :select t))



(set-prefix-key (kbd "s-q"))
(setf stumpwm:*mouse-focus-policy* :click)

(setf stumpwm:*message-window-gravity* :center)
(setf stumpwm:*input-window-gravity*   :center)
(stumpwm:set-font "-*-terminus-*-*-*-*-*-240-*-*-*-*-*-*")

(setf stumpwm:*mode-line-timeout* 10)
(setf stumpwm:*screen-mode-line-format*
      '("[^B%n^b] %W"
        ;; Battery
        " (BAT0 " (:eval (format nil "~D%" (bat0-percent)))
        " " (:eval (format nil "~,1F W" (/ (bat0-power-now) 1000000)))
        " " (:eval (let ((time (/ (BAT0-energy-now) (BAT0-power-now))))
                     (multiple-value-bind (hour minute-part) (truncate time)
                       (let ((minute (values (truncate (* minute-part 60)))))
                         (format nil "~D:~2,'0D" hour minute)))))
        ")"
        ;; Time
        " (%d)"))
(stumpwm:run-commands "mode-line")

(defun define-keys (map bindings)
  (mapcar (lambda (binding)
            (let ((key     (car binding))
                  (command (cdr binding)))
              (stumpwm:define-key map (stumpwm:kbd key) command)))
          bindings))

(define-keys stumpwm:*top-map*
    '(("s-x" . "colon")

      ("C-s-Up"    . "move-focus up")
      ("C-s-Down"  . "move-focus down")
      ("C-s-Left"  . "move-focus left")
      ("C-s-Right" . "move-focus right")

      ("s-Up"    . "exchange-direction up")
      ("s-Down"  . "exchange-direction down")
      ("s-Left"  . "exchange-direction left")
      ("s-Right" . "exchange-direction right")

      ("XF86Calculator" . "exec gnome-calculator")
      ;; TODO - Fix keyboard map to use XF86* for media keys
;     ("s-l"            . "exec dm-tool lock")
      ("s-l"            . "exec xtrlock")
      ("XF86HomePage"   . "exec x-www-browser")
      ("s-e"            . "exec nautilus")

      ("SunPrint_Screen"         . "scrot-all")
;     ("SunPrint_Screen"         . "scrot-display")
      ("M-SunPrint_Screen"       . "scrot-window")
      ("S-SunPrint_Screen"       . "scrot-selection")
      ("XF86AudioRaiseVolume"    . "exec amixer -q sset Master 3%+ unmute")
      ("XF86AudioLowerVolume"    . "exec amixer -q sset Master 3%- unmute")
;     ("XF86AudioMute"           . "exec amixer -q sset Master toggle")
      ("XF86MonBrightnessUp"     . "backlight-up   10")
      ("XF86MonBrightnessDown"   . "backlight-down 10")
      ("C-XF86MonBrightnessUp"   . "backlight-set  100")
      ("C-XF86MonBrightnessDown" . "backlight-set  0")

      ("s-Tab" . "fother")))

(define-keys stumpwm:*root-map*
    '(("c"   . "exec x-terminal-emulator")
      ("C-c" . "exec x-terminal-emulator")))
